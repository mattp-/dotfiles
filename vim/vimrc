set nocompatible
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

Bundle 'gmarik/vundle'

" Generally Useful:
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'vim-scripts/IndexedSearch'
Bundle 'bronson/vim-trailing-whitespace'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-ragtag'
Bundle 'tpope/vim-sensible'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'Lokaltog/vim-powerline'
Bundle 'Valloric/YouCompleteMe'
Bundle 'Raimondi/YAIFA'
Bundle 'scrooloose/nerdcommenter'
Bundle 'edsono/vim-matchit'
Bundle 'scrooloose/syntastic'
Bundle 'majutsushi/tagbar'
Bundle 'vim-scripts/Zenburn'
Bundle 'vim-scripts/Align'
Bundle 'vim-scripts/jQuery'
Bundle 'tomasr/molokai'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-vividchalk'
Bundle 'tpope/vim-speeddating'
Bundle 'ervandew/supertab'
Bundle 'sjbach/lusty.git'
Bundle 'sjl/gundo.vim'
Bundle 'mileszs/ack.vim'
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'

"let g:EasyMotion_leader_key = '<Leader>'

" splits
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Config
set t_Co=256
set term=screen-256color
syntax on
filetype on
"filetype plugin on
set vb
set incsearch
set showmatch

" tabs - defaults loaded by YAIFA
set smarttab
set expandtab

" indents
set smartindent
set autoindent

set number
set nobackup

set clipboard+=unnamed

set nolist
"set list
set lcs=tab:>-,trail:-

" case
set ignorecase
set infercase
set smartcase

set backspace=indent,eol,start
set hidden

set relativenumber

" binds
nnoremap / /\v
vnoremap / /\v
set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=85

set list
"set listchars=tab:▸\ ,eol:¬

" Tidy selected lines (or entire file) with _t:
nnoremap <silent> = :%!perltidy -q<Enter>
vnoremap <silent> = :!perltidy -q<Enter>
set pastetoggle=<F11>

" Indent using tabs (while in visual mode)
"vnoremap < <gv
"vnoremap > >gv
" make tab in v mode ident code
vmap <tab> >gv
vmap <s-tab> <gv
" make tab in normal mode ident code
nmap <tab> I<tab><esc>
nmap <s-tab> ^i<bs><esc>

" Search only in the selected block (visual mode)
vnoremap / <esc>/\%V

" Tabs uses c-l and c-h
map <C-h> <esc>:tabprevious<cr>
map <C-l> <esc>:tabnext<cr>

" simple stuff
let mapleader = ","
let g:ctrlp_map = '<c-p>'
map <Leader>b :CtrlPMRU<Return>
map <Leader>a :bprev<Return>
map <Leader>s :bnext<Return>
map <Leader>d :call Bclose()<Return>
map <Leader>f :b
"nnoremap <silent> <Leader>p :TlistToggle<CR>
nnoremap <silent> <Leader>p :TagbarToggle<CR>
"
nmap <silent> <Leader>n :NERDTreeToggle<CR>
nnoremap <silent> <Leader>c <Plug>RubyTestRun
nnoremap <silent> <Leader>C <Plug>RubyFileRun
nnoremap <silent> <Leader>l <Plug>RubyTestRunLast

map <Leader><tab> :bNext<Return>
map <Leader>q :bNext<Return>

" perl stuff
let perl_include_pod = 1
let perl_extended_vars = 1
set isk+=:

colorscheme zenburn
" colorscheme molokai
hi ColorColumn ctermbg=darkgrey
set wildignore+=*.o,*.obj,.git,*.png,*.jpg,.*gif
set encoding=utf8
set cul

" Syntastic
set matchpairs=(:),{:},[:],<:>
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_quiet_warnings=1

set laststatus=2 " Always show the statusline

let g:syntastic_mode_map = { 'mode': 'active',
                            \ 'passive_filetypes': ['perl'] }
vmap <leader>c <esc>:'<,'>:CoffeeCompile<CR>
map <leader>c :CoffeeCompile<CR>

" mappings
nnoremap j gj
nnoremap k gk

noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
nnoremap <leader>a :Ack<space>
nnoremap <leader>w <C-w>v<C-w>l
set mouse=a
inoremap <M-o> <Esc>o
inoremap <C-j> <Down>
let g:ragtag_global_maps = 1

" omake from vim!
"set shell=/bin/bash\ -i
map <Leader>o :!/home/mphillips/local/bin/omake<cr>

" Bclose() {{{2
" delete buffer without closing window
function! Bclose()
    let curbufnr = bufnr("%")
    let altbufnr = bufnr("#")

    if buflisted(altbufnr)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == curbufnr
        new
    endif

    if buflisted(curbufnr)
        execute("bdelete! " . curbufnr)
    endif
endfunction
cabbrev bdelete call Bclose()

setlocal iskeyword+=:  " make tags with :: in them useful

if ! exists("s:defined_functions")
function s:init_tags()
    perl <<EOF
        use Perl::Tags;
        use Perl::Tags::Naive::Lib;
        $naive_tagger = Perl::Tags::Naive::Lib->new( max_level=>2 );
        # only go one level down by default
EOF
endfunction

" let vim do the tempfile cleanup and protection
let s:tagsfile = tempname()

function s:do_tags(filename)
    perl <<EOF
        my $filename = VIM::Eval('a:filename');

        use Try::Tiny;
        try {
            $naive_tagger->process(files => $filename, refresh=>1 );

            my $tagsfile=VIM::Eval('s:tagsfile');
            VIM::SetOption("tags+=$tagsfile");

            # of course, it may not even output, for example, if there's nothing new to process
            $naive_tagger->output( outfile => $tagsfile );
        };
EOF
endfunction

call s:init_tags() " only the first time

let s:defined_functions = 1
endif

call s:do_tags(expand('%'))

augroup perltags
au!
autocmd BufRead,BufWritePost *.pm,*.pl call s:do_tags(expand('%'))
augroup END


"set fdm=indent
map <Leader>a za
map <Leader>A zA
